import os

from cs50 import SQL
from flask import Flask, flash, redirect, render_template, request, session
from flask_session import Session
from tempfile import mkdtemp
from werkzeug.exceptions import default_exceptions, HTTPException, InternalServerError
from werkzeug.security import check_password_hash, generate_password_hash

from helpers import apology, login_required, lookup, usd

# Configure application
app = Flask(__name__)

# Ensure templates are auto-reloaded
app.config["TEMPLATES_AUTO_RELOAD"] = True


# Ensure responses aren't cached
@app.after_request
def after_request(response):
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response.headers["Expires"] = 0
    response.headers["Pragma"] = "no-cache"
    return response


# Custom filter
app.jinja_env.filters["usd"] = usd

# Configure session to use filesystem (instead of signed cookies)
app.config["SESSION_FILE_DIR"] = mkdtemp()
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)

# Configure CS50 Library to use SQLite database
db = SQL("sqlite:///finance.db")
#                                                           stocks table
#   CREATE TABLE stocks (id INTEGER NOT NULL, symbol TEXT NOT NULL, name TEXT, shares INTEGER NOT NULL, FOREIGN KEY(id) REFERENCES users(id));

#                                                           history table
#   CREATE TABLE history (user_id INTEGER NOT NULL, symbol TEXT NOT NULL, price NUMERIC NOT NULL, shares INTEGER NOT NULL, time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,  FOREIGN KEY(user_id) REFERENCES users(id));

# Make sure API key is set
if not os.environ.get("API_KEY"):
    raise RuntimeError("API_KEY not set")


@app.route("/")
@login_required
def index():

    # get cash and owned shares of user
    wallet = db.execute("SELECT cash FROM users WHERE id=?", session.get("user_id"))[0]['cash']
    stocks = db.execute("SELECT * FROM stocks WHERE (id = ?)", session.get("user_id"))

    # count net worth and update prices of shares
    net_total = wallet
    for stock in stocks:
        stock['price'] = lookup(stock['symbol'])['price']
        net_total += stock['shares']*stock['price']

    """Show portfolio of stocks"""
    return render_template("index.html", cash=wallet, stocks=stocks, net_total=net_total)


@app.route("/buy", methods=["GET", "POST"])
@login_required
def buy():
    if request.method == "POST":

        # symbol check
        if not request.form.get("symbol"):
            return apology("symbol missing")
        if not lookup(request.form.get("symbol")):
            return apology("symbol not found")
        stock_info = lookup(request.form.get("symbol"))

        # shares check
        if not request.form.get("shares"):
            return apology("shares missing")
        if not request.form.get("shares").isdecimal():
            return apology("shares needs to be a positive integer")

        # cost check
        wallet = db.execute("SELECT cash FROM users WHERE id=?", session.get("user_id"))[0]['cash']
        cost = float(request.form.get("shares"))*stock_info["price"]
        if (wallet < cost):
            return apology("you dont have enough money")
        else:

            # produce transaction
            wallet -= cost
            if not db.execute("SELECT * FROM stocks WHERE (id = ?) AND (symbol = ?)", session.get("user_id"), stock_info['symbol']):
                db.execute("INSERT INTO stocks (id, symbol, shares, name) VALUES(?,?,?,?)", session.get(
                    "user_id"), stock_info['symbol'], request.form.get("shares"), stock_info['name'])

            else:
                new_shares = int(db.execute("SELECT shares FROM stocks WHERE (id = ?) AND (symbol = ?)", session.get(
                    "user_id"), stock_info['symbol'])[0]['shares']) + int(request.form.get("shares"))
                db.execute("UPDATE stocks SET shares = ? WHERE (id = ?) AND (symbol = ?)", new_shares, session.get(
                    "user_id"), stock_info['symbol'])

            # update cash in wallet
            db.execute("UPDATE users SET cash = ? WHERE (id = ?)", wallet, session.get(
                "user_id"))

            # update history
            db.execute("INSERT INTO history (user_id, symbol, price, shares) VALUES(?,?,?,?)", session.get(
                "user_id"), stock_info['symbol'], stock_info['price'], request.form.get("shares"))

            # return to index
            flash("Bought!")
            return redirect("/")

    else:
        """Buy shares of stock"""
        return render_template("buy.html")


@app.route("/history")
@login_required
def history():
    user_history = db.execute("SELECT * FROM history WHERE (user_id = ?)", session.get("user_id"))

    """Show history of transactions"""
    return render_template("history.html", history=user_history)


@app.route("/login", methods=["GET", "POST"])
def login():
    """Log user in"""

    # Forget any user_id
    session.clear()

    # User reached route via POST (as by submitting a form via POST)
    if request.method == "POST":

        # Ensure username was submitted
        if not request.form.get("username"):
            return apology("must provide username", 403)

        # Ensure password was submitted
        elif not request.form.get("password"):
            return apology("must provide password", 403)

        # Query database for username
        rows = db.execute("SELECT * FROM users WHERE username = ?", request.form.get("username"))

        # Ensure username exists and password is correct
        if len(rows) != 1 or not check_password_hash(rows[0]["hash"], request.form.get("password")):
            return apology("invalid username and/or password", 403)

        # Remember which user has logged in
        session["user_id"] = rows[0]["id"]

        # Redirect user to home page
        return redirect("/")

    # User reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("login.html")


@app.route("/logout")
def logout():
    """Log user out"""

    # Forget any user_id
    session.clear()

    # Redirect user to login form
    return redirect("/")


@app.route("/change_password", methods=["GET", "POST"])
@login_required
def change_password():

    if request.method == "POST":
        # old password check
        if not check_password_hash(db.execute("SELECT * FROM users WHERE id = ?", session.get("user_id"))[0]["hash"], request.form.get("old password")):
            return apology("Old password is incorrect")

        # new password check
        if not (request.form.get("password")):
            return apology("password missing")

        # confirmation check
        if request.form.get("password") != request.form.get("confirmation"):
            return apology("password does not match the confirmation")

        if request.form.get("password") == request.form.get("old password"):
            return apology("new password cannot be the same as old password")

        # successful password update
        db.execute("UPDATE users SET hash=? WHERE id=?", generate_password_hash(
            request.form.get("password")), session.get('user_id'))

        flash("Password Changed")
        return redirect("/")

    else:

        return render_template("change_password.html")


@app.route("/quote", methods=["GET", "POST"])
@login_required
def quote():
    if request.method == "POST":

        # symbol check
        if not request.form.get("symbol"):
            return apology("symbol missing")

        stock_info = lookup(request.form.get("symbol"))
        if not stock_info:
            return apology("symbol not found")

        # render answer
        flash("Quote found!")
        return render_template("quoted.html", stock=stock_info)

    else:

        """Get stock quote."""
        return render_template("quote.html")


@app.route("/register", methods=["GET", "POST"])
def register(code=200):
    users = db.execute("SELECT * FROM users")
    # on form submittion
    if request.method == "POST":
        # username check
        if not request.form.get("username") or request.form.get("username") in [row["username"] for row in users]:
            #flash("invalid username")
            return apology("invalid username", code=400)

        # password check
        if not (request.form.get("password")):
            #flash("type in a password and a confirmation")
            return apology("password missing", code=400)

        # confirmation check
        if request.form.get("password") != request.form.get("confirmation"):
            #flash("password does not match the confirmation")
            return apology("password does not match the confirmation", code=400)

        # successful registration
        db.execute("INSERT INTO users (username, hash) VALUES(?,?)", request.form.get(
            "username"), generate_password_hash(request.form.get("password")))
        flash("Registration successful!")
        return redirect("/login")

    """Register user"""
    return render_template("register.html"), code


@app.route("/sell", methods=["GET", "POST"])
@login_required
def sell():

    # get owned stocks
    #stocks = db.execute("SELECT symbol FROM stocks WHERE (id = ?)", session.get("user_id"))
    symbols = [stock['symbol'] for stock in db.execute("SELECT symbol FROM stocks WHERE (id = ?)", session.get("user_id"))]

    if request.method == "POST":

        # symbol check
        if request.form.get("symbol") not in symbols:
            return apology("you don't own any shares of this symbol")
        if not lookup(request.form.get("symbol")):
            return apology("failed to retrieve price of share")
        stock_info = lookup(request.form.get("symbol"))

        # shares check
        if not request.form.get("shares"):
            return apology("shares missing")
        if not request.form.get("shares").isdecimal():
            return apology("shares needs to be a positive integer")
        if int(request.form.get("shares")) > db.execute("SELECT shares FROM stocks WHERE (symbol = ?) AND (id = ?)", request.form.get(
                "symbol"), session.get("user_id"))[0]['shares']:
            return apology("you don't own that many shares")

        # cost check
        wallet = db.execute("SELECT cash FROM users WHERE id=?", session.get("user_id"))[0]['cash']
        cost = float(request.form.get("shares"))*stock_info["price"]

        # produce transaction
        wallet += cost
        # if owned == selling, delete it from table
        if db.execute("SELECT shares FROM stocks WHERE (symbol = ?) AND (id = ?)", request.form.get(
                "symbol"), session.get("user_id"))[0]['shares'] == int(request.form.get("shares")):
            db.execute("DELETE FROM stocks WHERE (symbol = ?) AND (id = ?)", request.form.get(
                "symbol"), session.get("user_id"))
        # else update to new amount
        else:
            new_shares = int(db.execute("SELECT shares FROM stocks WHERE (symbol = ?) AND (id = ?)", request.form.get(
                "symbol"), session.get("user_id"))[0]['shares']) - int(request.form.get("shares"))
            db.execute("UPDATE stocks SET shares = ? WHERE (id = ?) AND (symbol = ?)",
                       new_shares, session.get("user_id"), stock_info['symbol'])

        # update cash in wallet
        db.execute("UPDATE users SET cash = ? WHERE (id = ?)", wallet, session.get("user_id"))

        # update history
        db.execute("INSERT INTO history (user_id, symbol, price, shares) VALUES(?,?,?,?)", session.get(
            "user_id"), stock_info['symbol'], stock_info['price'], -1*int(request.form.get("shares")))

        # return to index
        flash("Sold!")
        return redirect("/")

    else:
        """Sell shares of stock"""
        return render_template("sell.html", symbols=symbols)


def errorhandler(e):
    """Handle error"""
    if not isinstance(e, HTTPException):
        e = InternalServerError()
    return apology(e.name, e.code)


# Listen for errors
for code in default_exceptions:
    app.errorhandler(code)(errorhandler)
